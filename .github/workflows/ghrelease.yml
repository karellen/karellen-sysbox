name: karellen-sysbox-copr-release
on:
  workflow_dispatch:
    inputs:
      tag:
        required: true
  push:
    tags:
      - karellen-sysbox-*
jobs:
  upload-assets:
    runs-on: ubuntu-24.04
    timeout-minutes: 600
    continue-on-error: false
    env:
      GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: 60
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0
      - name: COPR to GitHub Release Action
        uses: karellen/copr-to-gh-release@main
        with:
          copr-owner-name: karellen
          copr-project-name: karellen-sysbox
          copr-package-name: karellen-sysbox
          tag-to-version-regex: '^karellen-sysbox-(\d.+)$'
          tag: ${{ github.event_name == 'push' && github.ref_name || github.event.inputs.tag }}
          clobber-assets: ${{ github.event_name == 'push' }}
          wait-build: true

  build-k8s-images:
    name: build_k8s_image_${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      packages: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm

    needs: [upload-assets]
    timeout-minutes: 600
    continue-on-error: false
    outputs:
      SYSBOX_CE_VER_FULL: ${{ steps.image.outputs.SYSBOX_CE_VER_FULL }}
      SYSBOX_CE_VER_KARELLEN: ${{ steps.image.outputs.SYSBOX_CE_VER_KARELLEN }}
      SYSBOX_DEPLOY_K8S_IMAGE_PATCH: ${{ steps.image.outputs.SYSBOX_DEPLOY_K8S_IMAGE_PATCH }}
    env:
      GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: 60
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0
          submodules: recursive

      - name: Start Docker
        run: |
          while ! sudo systemctl start docker; do sudo systemctl status docker || true; sleep 1; done
          while ! docker info; do sleep 1; done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Build K8S Deploy Image
        id: image
        run: |
          patch -p1 -d sysbox/sysbox-pkgr < sysbox-pkgr-0.patch
          cd sysbox/sysbox-pkgr/k8s
          make all

  assemble-images:
    runs-on: ubuntu-24.04
    permissions:
      packages: write
      contents: read
    needs: [build-k8s-images]
    timeout-minutes: 600
    continue-on-error: false
    env:
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: 60
      SYSBOX_CE_VER_FULL: ${{ needs.build-k8s-images.outputs.SYSBOX_CE_VER_FULL }}
      SYSBOX_CE_VER_KARELLEN: ${{ needs.build-k8s-images.outputs.SYSBOX_CE_VER_KARELLEN }}
      SYSBOX_DEPLOY_K8S_IMAGE_PATCH: ${{ needs.build-k8s-images.outputs.SYSBOX_DEPLOY_K8S_IMAGE_PATCH }}
    steps:
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Merge images
        run: |
          PLATFORM_TAG="${SYSBOX_CE_VER_FULL}${SYSBOX_DEPLOY_K8S_IMAGE_PATCH}"
          for TAG in "$PLATFORM_TAG" "${SYSBOX_CE_VER_KARELLEN}${SYSBOX_DEPLOY_K8S_IMAGE_PATCH}" latest; do
              docker manifest create ghcr.io/karellen/sysbox-deploy-k8s:$TAG \
                    --amend ghcr.io/karellen/sysbox-deploy-k8s:v${PLATFORM_TAG}-amd64 \
                    --amend ghcr.io/karellen/sysbox-deploy-k8s:v${PLATFORM_TAG}-arm64
              docker manifest push ghcr.io/karellen/sysbox-deploy-k8s:$TAG
          done

